/**
 * @file    Transaction.hxx
 * @author  E. Pozdnyakov
 *
 * @date    Created on October 31, 2018, 06:48 PM
 */

#pragma once

#include <QString>

namespace even {

/** @brief Entitity of storage handler */
class Transaction {
    public:
        Transaction();
        ~Transaction() = default;

    private:
        /** @brief  ByteArray unique hash of this transaction  */
        QByteArray _byteHash;

        /** @brief  String unique hash of this transaction  */
        QString _hash;

        /** @brief String signature message fragment. In case there
         *  is a spent input, the signature of the private key is stored
         * here. If no signature is required, it is empty (all 9's) and
         * can be used for storing the message value when making a transfer.
         * More to that later.
         */

        QString _signatureMessageFragment;
        /** @brief String address. In case this is an *output*, then
         * this is the address of the recipient. In case it is an *input*,
         * then it is the address of the input which is used to send the
         * tokens from (i.e. address generated from the private key)
         */
        QString _address;

        /** @brief The transaction object field is used to search transaction
         * for srecific tag value
         */
        QString _tag;

        /** @brief Int value transferred in this transaction */
        int value = 0.0;

        /** @brief Int timestamp of the transaction. It is important
         * to know that timestamps are not enforced.
        uint timestamp =  QDateTime::toTime_t();

        /** @brief Int the index of this transaction in the message. */
        int currentIndex = 0;

        /** @brief Int the total number of transactions in this message */
        int lastIndex = 0;

        /** @brief String message hash, which is used for grouping
         * transactions of the message together. With the message hash you
         * can identify transactions which were in the same message.
         */
        QString bundle;

        /** @brief String hash of the first transaction that
         * was approved with this transaction
         */
        QString trunkTransaction;

        /** @brief String hash of the second transaction that was
         * approved with this transaction
         */
        QString branchTransaction;

        /** @brief String hash. The nonce is required for the transaction
         *  to be accepted by the network. It is generated by doing Proof
         * of Work (either in IRI via the attachToTangle API call, or with
         * one of the libraries such as ccurl).
         */
        QString nonce;

        /** @brief Indicates that transaction pending or accepted */
        bool _persistence;
};

};

